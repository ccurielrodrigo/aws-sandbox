# 名前: Docker CI/CDパイプライン
name: Docker CI/CD Pipeline

# ワークフローの手動トリガーを許可する
on:
  workflow_dispatch:

# ジョブ: ビルド、テスト、デプロイ
jobs:
  build-test-deploy:
    # GitHubホストのUbuntuランナーを使用
    runs-on: ubuntu-latest

    steps:
      # コードをリポジトリからチェックアウト
      - name: コードをチェックアウト
        uses: actions/checkout@v2
        with:
          verbose: true  # 詳細ログを有効化

      # Gitコミット情報を記録
      - name: Gitコミット情報をログに記録
        run: |
          echo "Commit SHA: ${{ github.sha }}"
          echo "Commit Message: ${{ github.event.head_commit.message }}"
          echo "Branch: ${{ github.ref_name }}"

      # DockerHubにログイン
      - name: DockerHubにログイン
        uses: docker/login-action@v1
        with: 
          # DockerHubユーザー名とパスワードはシークレットから取得
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Dockerログインが成功したか確認
      - name: Dockerログインの確認
        run: docker info
        continue-on-error: false  # ログインに失敗した場合、ジョブを停止

      # 環境変数と.envファイルを生成
      - name: 環境ファイルの作成
        run: |
          # 空の.envファイルを作成
          touch .env
          # DockerHubユーザー名を環境ファイルに保存
          echo DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}" >> .env
          # シークレットとして保存されているデータを環境変数として渡す
          echo DOCKER_PASSWORD="${{ secrets.DOCKER_PASSWORD }}" >> .env

      # Dockerイメージのビルド
      - name: Dockerイメージのビルド
        uses: docker/build-push-action@v2
        with:
          # 現在のディレクトリをコンテキストとして使用
          context: .
          # ビルド後のイメージをプッシュ
          push: true
          # タグにGitのSHAを使用して一意に識別
          tags: exampleuser/webapp:${{ github.sha }}
        env:
          BUILDKIT_PROGRESS: plain  # ビルドプロセスの詳細を増やす

      # Dockerイメージのビルドとプッシュを確認
      - name: Dockerイメージのビルドとプッシュ確認
        run: docker images
        continue-on-error: false  # ビルドとプッシュが成功したか確認

      # EC2インスタンスへのデプロイ
      - name: EC2インスタンスへのデプロイ
        uses: appleboy/ssh-action@master
        with:
          # EC2のホストとユーザー情報、プライベートキーをシークレットから取得
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # Dockerがインストールされているか確認、ない場合はインストール
            if ! command -v docker &> /dev/null; then
              echo "Docker not found. Installing Docker..."
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
              newgrp docker
            fi
            # 既存のコンテナがあれば停止と削除
            sudo docker stop webapp || true
            sudo docker rm webapp || true
            # DockerHubから最新のイメージをプル
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}
            # 新しいコンテナを作成し、ポート80で公開
            sudo docker run -d --name webapp -p 80:80 ${{ secrets.DOCKER_USERNAME }}/webapp:${{ github.sha }}
        continue-on-error: false
